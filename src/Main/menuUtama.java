/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Main;

import Model.SessionManager;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JPanel;

/**
 *
 * @author LENOVO
 */
public class menuUtama extends javax.swing.JFrame {

    /**
     * Creates new form Menu_Utama
     */
    public menuUtama() throws SQLException {
        initComponents();
//        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
//        
        execute();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pn_navbar = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        pn_sidebar = new javax.swing.JPanel();
        pn_menu = new javax.swing.JPanel();
        pn_content = new javax.swing.JPanel();
        pn_utama = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1062, 647));
        setPreferredSize(new java.awt.Dimension(1, 1));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        pn_navbar.setBackground(new java.awt.Color(170, 170, 242));
        pn_navbar.setPreferredSize(new java.awt.Dimension(982, 70));

        jLabel1.setFont(new java.awt.Font("Lucida Fax", 3, 24)); // NOI18N
        jLabel1.setText("SIMPUS STIS");

        javax.swing.GroupLayout pn_navbarLayout = new javax.swing.GroupLayout(pn_navbar);
        pn_navbar.setLayout(pn_navbarLayout);
        pn_navbarLayout.setHorizontalGroup(
            pn_navbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pn_navbarLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(861, Short.MAX_VALUE))
        );
        pn_navbarLayout.setVerticalGroup(
            pn_navbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
        );

        pn_sidebar.setBackground(new java.awt.Color(204, 204, 204));
        pn_sidebar.setPreferredSize(new java.awt.Dimension(250, 442));
        pn_sidebar.setLayout(new java.awt.BorderLayout());

        pn_menu.setBackground(new java.awt.Color(204, 204, 255));
        pn_menu.setLayout(new javax.swing.BoxLayout(pn_menu, javax.swing.BoxLayout.Y_AXIS));
        pn_sidebar.add(pn_menu, java.awt.BorderLayout.CENTER);

        pn_content.setBackground(new java.awt.Color(255, 255, 255));
        pn_content.setPreferredSize(new java.awt.Dimension(900, 860));
        pn_content.setLayout(new java.awt.BorderLayout());

        pn_utama.setBackground(new java.awt.Color(255, 255, 255));
        pn_utama.setPreferredSize(new java.awt.Dimension(900, 860));
        pn_utama.setLayout(new java.awt.BorderLayout());
        pn_content.add(pn_utama, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pn_navbar, javax.swing.GroupLayout.PREFERRED_SIZE, 1062, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(pn_sidebar, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(pn_content, javax.swing.GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pn_navbar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pn_content, javax.swing.GroupLayout.PREFERRED_SIZE, 577, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pn_sidebar, javax.swing.GroupLayout.PREFERRED_SIZE, 577, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
          // TODO add your handling code here:
           // Mendapatkan peran (role) pengguna dari SessionManager
    String currentUserRole = SessionManager.getInstance().getCurrentUserRole();

        if (currentUserRole != null && currentUserRole.equals("admin")) {
    
        pn_utama.add(new PanelAdmin1());
        pn_utama.repaint();
        pn_utama.revalidate();
        }
         if (currentUserRole != null && currentUserRole.equals("anggota")) {
    
        pn_utama.add(new PanelAnggota());
        pn_utama.repaint();
        pn_utama.revalidate();
        }
    }//GEN-LAST:event_formWindowOpened

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(menuUtama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(menuUtama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(menuUtama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(menuUtama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
/* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new menuUtama().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(menuUtama.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
     
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel pn_content;
    private javax.swing.JPanel pn_menu;
    private javax.swing.JPanel pn_navbar;
    private javax.swing.JPanel pn_sidebar;
    private javax.swing.JPanel pn_utama;
    // End of variables declaration//GEN-END:variables

    private ImageIcon createIcon(String path) {
    return new ImageIcon(getClass().getResource(path));
}

private void setupMenuItems() throws SQLException {
    // Icon untuk menu
    ImageIcon iconHome = createIcon("/myimg/icons8-home-32.png");
    ImageIcon iconDB = createIcon("/myimg/icons8-books-32.png");
    ImageIcon iconDA = createIcon("/myimg/icons8-address-book-32.png");
    ImageIcon iconDP = createIcon("/myimg/icons8-bill-32.png");
     ImageIcon iconP = createIcon("/myimg/icons8-person-32.png");
  
    // Mendapatkan peran (role) pengguna dari SessionManager
    String currentUserRole = SessionManager.getInstance().getCurrentUserRole();

    // Menyiapkan menu untuk Admin
    if (currentUserRole != null && currentUserRole.equals("admin")) {
        
        menuItem menuHome =  new menuItem(iconHome, false, null, "Beranda",new ActionListener(){
         @Override
            public void actionPerformed(ActionEvent e) {
                pn_utama.removeAll();
                pn_utama.add(new PanelAdmin1());
                pn_utama.repaint();
                pn_utama.revalidate();
            }   
        });
        
        
        menuItem menuDaftarBuku =  new menuItem(iconDB, false, null, "Daftar Buku",new ActionListener(){
         @Override
            public void actionPerformed(ActionEvent e) {
                pn_utama.removeAll();
             try {
                 pn_utama.add(new DaftarBuku());
             } catch (SQLException ex) {
                 Logger.getLogger(menuUtama.class.getName()).log(Level.SEVERE, null, ex);
             }
                pn_utama.repaint();
                pn_utama.revalidate();
            }   
        });
        
        menuItem menuDaftarAnggota =  new menuItem(iconDA, false, null, "Daftar Anggota",new ActionListener(){
         @Override
            public void actionPerformed(ActionEvent e) {
                pn_utama.removeAll();
             try {
                 pn_utama.add(new DaftarAnggota());
             } catch (SQLException ex) {
                 Logger.getLogger(menuUtama.class.getName()).log(Level.SEVERE, null, ex);
             }
                pn_utama.repaint();
                pn_utama.revalidate();
            }   
        });
        
        menuItem menuDaftarPeminjaman =  new menuItem(iconDP, false, null, "Daftar Peminjaman",new ActionListener(){
         @Override
            public void actionPerformed(ActionEvent e) {
                pn_utama.removeAll();
             try {
                 pn_utama.add(new DaftarPeminjaman());
             } catch (SQLException ex) {
                 Logger.getLogger(menuUtama.class.getName()).log(Level.SEVERE, null, ex);
             }
                pn_utama.repaint();
                pn_utama.revalidate();
            }   
        });
        
   addMenu(menuHome, menuDaftarPeminjaman, menuDaftarBuku,  menuDaftarAnggota);
  }

    // Menyiapkan menu untuk Anggota
    if (currentUserRole != null && currentUserRole.equals("anggota")) {
        
        menuItem menuHome =  new menuItem(iconHome, false, null, "Beranda",new ActionListener(){
         @Override
            public void actionPerformed(ActionEvent e) {
                pn_utama.removeAll();
                pn_utama.add(new PanelAnggota());
                pn_utama.repaint();
                pn_utama.revalidate();
            }   
        });
        
        menuItem menuKoleksiBuku =  new menuItem(iconDB, false, null, "Koleksi Buku",new ActionListener(){
         @Override
            public void actionPerformed(ActionEvent e) {
                pn_utama.removeAll();
             try {
                 pn_utama.add(new KoleksiBuku());
             } catch (SQLException ex) {
                 Logger.getLogger(menuUtama.class.getName()).log(Level.SEVERE, null, ex);
             }
                pn_utama.repaint();
                pn_utama.revalidate();
            }   
        });
        
         
         menuItem menuRiwayatPinjam =  new menuItem(iconDP, false, null, "Riwayat Pinjam",new ActionListener(){
         @Override
            public void actionPerformed(ActionEvent e) {
                pn_utama.removeAll();
             try {
                 pn_utama.add(new RiwayatPinjam());
             } catch (SQLException ex) {
                 Logger.getLogger(menuUtama.class.getName()).log(Level.SEVERE, null, ex);
             }
                pn_utama.repaint();
                pn_utama.revalidate();
            }   
        });
         
         menuItem menuProfil =  new menuItem(iconP, false, null, "Profil",new ActionListener(){
         @Override
            public void actionPerformed(ActionEvent e) {
                pn_utama.removeAll();
                pn_utama.add(new Profil());
                pn_utama.repaint();
                pn_utama.revalidate();
            }   
        });
        
        addMenu(menuHome, menuKoleksiBuku, menuRiwayatPinjam,  menuProfil);
    }
}

private void execute() throws SQLException {
    setupMenuItems();
}

    
       
    private void addMenu(menuItem... menu) {
        for (int i = 0; i < menu.length; i++) {
            pn_menu.add(menu[i]);
            ArrayList<menuItem> subMenu = menu[i].getSubMenu();
            for (menuItem m : subMenu) {
                addMenu(m);
            }
        }
        pn_menu.revalidate();
    }

   
}
